/* HttpOverWs types */
type HttpRequestId = nat64;

type HttpMethod = variant {
    GET;
    POST;
    PUT;
    HEAD;
    DELETE;
};

type HttpHeader = record {
    name : text;
    value : text;
};

type HttpRequest = record {
    url : text;
    method : HttpMethod;
    headers : vec HttpHeader;
    body : opt blob;
};

type HttpRequestTimeoutMs = nat64;

type HttpResponse = record {
    status : nat;
    headers : vec HttpHeader;
    body : blob;
};

type HttpOverWsMessage = variant {
    SetupProxyClient;
    HttpRequest : record { HttpRequestId; HttpRequest };
    HttpResponse : record { HttpRequestId; HttpResponse };
    Error : record { opt HttpRequestId; text };
};

type HttpFailureReason = variant {
    RequestTimeout;
    ProxyError : text;
};

type HttpOverWsError = variant {
    NotHttpOverWsType : text;
    InvalidHttpMessage;
    ProxyNotFound;
    RequestIdNotFound;
    NotYetReceived;
    NoProxiesConnected;
    ConnectionNotAssignedToProxy;
    RequestFailed : HttpFailureReason;
};
/* End HttpOverWs types */

/* Proxy canister types */
type CanisterId = principal;
type CanisterCallbackMethodName = text;

type HttpRequestEndpointArgs = record {
    request : HttpRequest;
    timeout_ms : opt HttpRequestTimeoutMs;
    callback_method_name : opt CanisterCallbackMethodName;
};

type InvalidRequest = variant {
    InvalidUrl : text;
    TooManyHeaders;
    InvalidTimeout;
};

type ProxyCanisterError = variant {
    InvalidRequest : InvalidRequest;
    HttpOverWs : HttpOverWsError;
};

type HttpRequestEndpointResult = variant {
    Ok : HttpRequestId;
    Err : ProxyCanisterError;
};

type RequestState = variant {
    Executing : opt CanisterCallbackMethodName;
    Executed;
    CallbackFailed : text;
};

type CanisterRequest = record {
    canister_id : CanisterId;
    state : RequestState;
};
/* End Proxy canister types */
